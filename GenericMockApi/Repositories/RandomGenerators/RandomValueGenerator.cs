using GenericMockApi.Repositories.RandomGenFactory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace GenericMockApi.Repositories.RandomGenerators
{
    // There are two approaches to generating a value of any type:
    // generics and converting to object.

    // For value types it's better to use generics, to get rid of boxing/unboxing
    // For reference types it's more simple and clean to use boxing into object
    // but here it's done in generic way for both cases

    /// <summary>
    /// A non-generic helper class to use with collections of generators
    /// </summary>
    public abstract class RandomValueGenerator
    {
        
    }

    /// <summary>
    /// A generic abstract class defining methods for generating random values of type T.
    /// 
    /// It works different from how Random class operates:
    /// while values obtained from Random are sequential and depend on previously obtained value,
    /// this class produces a value and then increments the seed. This effectively produces only one
    /// value per generator.
    /// This way we can produce a random value with a specified "index" and quickly "skip" values
    /// by just manipulating the seed (with O(1) speed). But it uses more memory this way, so be
    /// careful when using it to generate a large amount of values. Also it technically places the limit
    /// on a number of generated values (default implementation of Random uses int seed so the limit is
    /// 4294967295 generated values).
    /// </summary>
    /// <typeparam name="T">A type T values of which to generate</typeparam>
    public abstract class RandomValueGenerator<T> : RandomValueGenerator
    {
        /// <summary>
        /// Seed value used for internal generator
        /// </summary>
        protected int _seed;

        /// <summary>
        /// Initializes a random generator with provided integer seed
        /// </summary>
        /// <param name="seed">Seed value for internal random generator</param>
        protected RandomValueGenerator(int seed)
        {
            _seed = seed;
        }

        /// <summary>
        /// Gets the next value from the generator
        /// </summary>
        /// <returns>Next random value from the generator</returns>
        public T GetNext()
        {
            var value = GenerateRandomValue();
            IncrementSeed();
            return value;
        }

        protected abstract T GenerateRandomValue();

        /// <summary>
        /// Use this method to "skip" values generated by the generator
        /// </summary>
        /// <param name="skip">A number of values to skip</param>
        public RandomValueGenerator<T> Skip(int skip)
        {
            SetSeed(skip);
            return this;
        }

        /// <summary>
        /// Use this method in derived class to set the seed of internal generator(s)
        /// </summary>
        /// <param name="seed"></param>
        /// <returns></returns>
        protected abstract void SetSeed(int seed);


        /// <summary>
        /// Use this method in derived class to increment the seed of internal generator(s)
        /// </summary>
        /// <returns></returns>
        protected abstract void IncrementSeed();

    }
}
